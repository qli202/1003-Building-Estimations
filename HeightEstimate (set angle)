// The CameraVideoPageController is a class that controls the camera 
// video page.  This class provides a some useful methods you will
// need to call:
//     cameraVideoPage.displayMessage(message, timeout):
//         Causes a short message string to be displayed on the
//         page for a brief period.  Useful for showing quick
//         notifications to the user.  message is a plain string.
//         timeout is option and denotes the length of time in msec
//         to show the message for.
//     cameraVideoPage.setHeadsUpDisplayHTML(html):
//         This will set or update the heads-up-display with the
//         text given in the html argument.  Usually this should 
//         just be a string with text and line breaks (<br />).

// Initialise the camera video page and callback to our 
// cameraVideoPageInitialised() function when ready.
var cameraVideoPage = new CameraVideoPageController(
        cameraVideoPageInitialised);

var cameraHeight, betaApex, heightOfUser, distance, height, betaBase, looper = 0
var cameraVideoPage = new CameraVideoPageController(
        cameraVideoPageInitialised);

// You may need to create variables to store state.
window.addEventListener("deviceorientation", handleOrientation, true);

function handleOrientation(event)
{
    alpha = event.alpha
    betaAngle = event.beta
    gamma = event.gamma
//cameraVideoPage.setHeadsUpDisplayHTML("beta:" + betaAngle + "<br/>")
cameraVideoPage.setHeadsUpDisplayHTML("beta: " + betaAngle + "</br>" + "Distance: " + distance + "</br>" + "Height: " + height)    
}


//Function to calculate distance from object
function calculateDistanceToObject(beta, heightOfUser)
{
    var distance
    angleToBase = betaBase * (Math.PI / 180) //Assuming that device screen up is 0 degrees, that's what my phone says atleast
    distance = heightOfUser * Math.tan(angleToBase) // trig
		
    return distance 
}

//function to determine the height of the object
function heightOfObject(distance, heightOfUser, beta)
{
    var heightOfObject
    betaApexRads = (Math.PI / 180) * (beta - 90) //minus 90 from beta value as 90 degrees is when phone is vertical, draw triangle to confirm angle is correct
    heightObjectPartial = Math.tan(betaApexRads) * distance // trig
    heightOfObject = heightObjectPartial + heightOfUser // partial height plus height of user gives height of object
    return heightOfObject
}

// This function is called by a button to set the height of phone from the
// ground, in metres.
function setCameraHeightValue()
{
    heightOfUser = Number(prompt("Enter height of the user: "))
    
    while (isNaN(heightOfUser) === true || heightOfUser < 0)
        {
            heightOfUser = prompt("Enter a positive numeric value for the height: ")
        }

    cameraVideoPage.displayMessage("Height of user: " + heightOfUser + " metres", 1000)
    return heightOfUser
    // Step 3: Set camera height
    // check if input is a number and is positive
    // display on screen using the displayMessage method
}
    
// This function is called by a button to set the angle to the base of
// the object being measured.  It uses the current smoothed tilt angle.
function setBaseTiltAngle()
{
    betaBase = betaAngle
    cameraVideoPage.displayMessage("base angle: " + betaBase, 1000)
    
    //Check possible angles, Calculate if correct
    if (0 < betaBase && betaBase < 180)
        {
            if (0 < betaApex && betaApex < 180)
                {    
                    if (betaApex > betaBase)
                        {
                            distance = calculateDistanceToObject(betaBase, heightOfUser);
                            height = heightOfObject(distance, heightOfUser, betaApex);
                        }
                }
        }

    //Throw up errors if angles are wrong
    if (betaBase < 0 || 180 < betaBase)
        {
            cameraVideoPage.displayMessage("Base angle must be inbetween 0° and 180°", 1000);
        }
    if (betaApex < 0 || 180 < betaApex)
        {
            cameraVideoPage.displayMessage("Apex angle must be inbetween 0° and 180°", 1000);
        }
    if (betaApex < betaBase)
        {
            cameraVideoPage.displayMessage("Building apex must be higher than base- consider reversing", 1000);
        }
    if (betaApex === null || betaBase === null)
        {
            cameraVideoPage.displayMessage("Unable to detect angle", 1000);
        }

    //Check calculations and display if correct
    if (distance > 0)
        {
            //cameraVideoPage.setHeadsUpDisplayHTML("beta: " + betaAngle + "</br>" + "Distance: " + distance + "</br>" + "Height: " + height);
        }
    else
        {
            cameraVideoPage.displayMessage("Distance < 0, please check and reenter inputs", 5);
        }
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
}

// This function is called by a button to set the angle to the apex of
// the object being measured.  It uses the current smoothed tilt angle.
function setApexTiltAngle()
{
    betaApex = betaAngle
    cameraVideoPage.displayMessage("apex angle: " + betaApex, 1000)
    
    //Check possible angles, Calculate if correct
    if (0 < betaBase && betaBase < 180)
        {
            if (0 < betaApex && betaApex < 180)
                {    
                    if (betaApex > betaBase)
                        {
                            distance = calculateDistanceToObject(betaBase, heightOfUser);
                            height = heightOfObject(distance, heightOfUser, betaApex);
                        }
                }
        }

    //Throw up errors if angles are wrong
    if (betaBase < 0 || 180 < betaBase)
        {
            cameraVideoPage.displayMessage("Base angle must be inbetween 0° and 180°", 2000);
        }
    if (betaApex < 0 || 180 < betaApex)
        {
            cameraVideoPage.displayMessage("Apex angle must be inbetween 0° and 180°", 2000);
        }
    if (betaApex < betaBase)
        {
            cameraVideoPage.displayMessage("Building apex must be higher than base- consider reversing", 2000);
        }
    if (betaApex === null || betaBase === null)
        {
            cameraVideoPage.displayMessage("Unable to detect angle", 2000);
        }

    //Check calculations and display if correct
    if (distance > 0)
        {
            cameraVideoPage.setHeadsUpDisplayHTML("Distance: " + distance + "</br>" + "Height: " + height);
        }
    else
        {
            cameraVideoPage.displayMessage("Distance < 0, please check and reenter inputs", 5);
        }
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
}
function cameraVideoPageInitialised(HTML)
{
    cameraVideoPage.setHeadsUpDisplayHTML(HTML);
    // Step 1: Check for and intialise deviceMotion
}
